---
swagger: '2.0'
info:
  title: Pyor API
  description: API to access worker and queue configuratons, register tasks, start
    them with given parameters and monitor the results.
  version: '1.0'
host: localhost:5000
basePath: "/api"
schemes:
- http
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  OAuth2Implicit:
    type: oauth2
    flow: implicit
    authorizationUrl: localhost:5000/oauth/authorize
    scopes:
      role:read: Grants read access to roles
      role:write: Grants write access to roles
      user:read: Grants read access to users
      user:write: Grants write access to users
      queue:read: Grants read access to queues
      queue:write: Grants write access to queues
      worker:read: Grants read access to workers
      worker:write: Grants write access to workers
      taskfile:read: Grants read access to taskfiles
      taskfile:write: Grants write access to taskfiles
      task:read: Grants read access to tasks
      task:write: Grants write access to tasks
      experiment:read: Grants read access to experiments
      experiment:write: Grants write access to experiments
  OAuth2AccessCode:
    type: oauth2
    flow: accessCode
    authorizationUrl: localhost:5000/oauth/authorize
    tokenUrl: localhost:5000/oauth/token
    scopes:
      role:read: Grants read access to roles
      role:write: Grants write access to roles
      user:read: Grants read access to users
      user:write: Grants write access to users
      queue:read: Grants read access to queues
      queue:write: Grants write access to queues
      worker:read: Grants read access to workers
      worker:write: Grants write access to workers
      taskfile:read: Grants read access to taskfiles
      taskfile:write: Grants write access to taskfiles
      task:read: Grants read access to tasks
      task:write: Grants write access to tasks
      experiment:read: Grants read access to experiments
      experiment:write: Grants write access to experiments
  OAuth2Password:
    type: oauth2
    flow: password
    authorizationUrl: localhost:5000/oauth/authorize
    tokenUrl: localhost:5000/oauth/token
    scopes:
      role:read: Grants read access to roles
      role:write: Grants write access to roles
      user:read: Grants read access to users
      user:write: Grants write access to users
      queue:read: Grants read access to queues
      queue:write: Grants write access to queues
      worker:read: Grants read access to workers
      worker:write: Grants write access to workers
      taskfile:read: Grants read access to taskfiles
      taskfile:write: Grants write access to taskfiles
      task:read: Grants read access to tasks
      task:write: Grants write access to tasks
      experiment:read: Grants read access to experiments
      experiment:write: Grants write access to experiments
paths:
  "/roles":
    get:
      summary: Retrieves one or more roles
      security:
        - OAuth2Implicit: [role:read]
        - OAuth2AccessCode: [role:read]
        - OAuth2Password: [role:read]
      parameters:
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of queues
          schema:
            "$ref": "#/definitions/RoleCollection"
        '400':
          "$ref": "#/responses/BadRequest"
      tags:
      - Role
    post:
      summary: Stores one or more roles
      security:
        - OAuth2Implicit: [role:write]
        - OAuth2AccessCode: [role:write]
        - OAuth2Password: [role:write]
      parameters:
      - in: body
        name: Role
        required: true
        schema:
          "$ref": "#/definitions/Role"
      responses:
        '201':
          "$ref": "#/responses/Created"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      tags:
      - Role
  "/roles/{roleId}":
    get:
      summary: Retrieves a Role document
      security:
        - OAuth2Implicit: [role:read]
        - OAuth2AccessCode: [role:read]
        - OAuth2Password: [role:read]
      responses:
        '200':
          description: Role document fetched successfully
          schema:
            "$ref": "#/definitions/Role"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/Role__id"
      - "$ref": "#/parameters/embedded"
      tags:
      - Role
    delete:
      summary: Deletes a Role document
      security:
        - OAuth2Implicit: [role:write]
        - OAuth2AccessCode: [role:write]
        - OAuth2Password: [role:write]
      responses:
        '204':
          description: Role document deleted successfully
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Role__id"
      tags:
      - Role
  "/users":
    get:
      summary: Retrieves one or more users
      security:
        - OAuth2Implicit: [user:read]
        - OAuth2AccessCode: [user:read]
        - OAuth2Password: [user:read]
      parameters:
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of queues
          schema:
            "$ref": "#/definitions/UserCollection"
        '400':
          "$ref": "#/responses/BadRequest"
      tags:
      - User
    post:
      summary: Stores one or more users and sends confirmation mail(s)
      security:
        - OAuth2Implicit: [user:write]
        - OAuth2AccessCode: [user:write]
        - OAuth2Password: [user:write]
      parameters:
      - in: body
        name: User
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        '201':
          "$ref": "#/responses/Created"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      tags:
      - User
  "/users/{userId}":
    get:
      summary: Retrieves a User document
      security:
        - OAuth2Implicit: [user:read]
        - OAuth2AccessCode: [user:read]
        - OAuth2Password: [user:read]
      responses:
        '200':
          description: User document fetched successfully
          schema:
            "$ref": "#/definitions/User"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/User__id"
      - "$ref": "#/parameters/embedded"
      tags:
      - User
    delete:
      summary: Deletes a User document
      security:
        - OAuth2Implicit: [user:write]
        - OAuth2AccessCode: [user:write]
        - OAuth2Password: [user:write]
      responses:
        '204':
          description: User document deleted successfully
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/User__id"
      tags:
      - User
  "/queues":
    get:
      summary: Retrieves one or more queues
      security:
        - OAuth2Implicit: [queue:read]
        - OAuth2AccessCode: [queue:read]
        - OAuth2Password: [queue:read]
      parameters:
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of queues
          schema:
            "$ref": "#/definitions/QueueCollection"
        '400':
          "$ref": "#/responses/BadRequest"
      tags:
      - Queue
    post:
      summary: Stores one or more queues
      security:
        - OAuth2Implicit: [queue:write]
        - OAuth2AccessCode: [queue:write]
        - OAuth2Password: [queue:write]
      parameters:
      - in: body
        name: Queue
        required: true
        schema:
          "$ref": "#/definitions/Queue"
      responses:
        '201':
          "$ref": "#/responses/Created"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      tags:
      - Queue
  "/queues/{queueId}":
    get:
      summary: Retrieves a Queue document
      security:
        - OAuth2Implicit: [queue:read]
        - OAuth2AccessCode: [queue:read]
        - OAuth2Password: [queue:read]
      responses:
        '200':
          description: Queue document fetched successfully
          schema:
            "$ref": "#/definitions/Queue"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/Queue__id"
      - "$ref": "#/parameters/embedded"
      tags:
      - Queue
    put:
      summary: Replaces a Queue document
      security:
        - OAuth2Implicit: [queue:write]
        - OAuth2AccessCode: [queue:write]
        - OAuth2Password: [queue:write]
      responses:
        '200':
          "$ref": "#/responses/Updated"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Queue__id"
      - in: body
        name: Queue
        required: true
        schema:
          "$ref": "#/definitions/Queue"
      tags:
      - Queue
    delete:
      summary: Deletes a Queue document
      security:
        - OAuth2Implicit: [queue:write]
        - OAuth2AccessCode: [queue:write]
        - OAuth2Password: [queue:write]
      responses:
        '204':
          description: Queue document deleted successfully
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Queue__id"
      tags:
      - Queue
  "/workers":
    get:
      summary: Retrieves one or more workers
      security:
        - OAuth2Implicit: [worker:read]
        - OAuth2AccessCode: [worker:read]
        - OAuth2Password: [worker:read]
      parameters:
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of workers
          schema:
            "$ref": "#/definitions/WorkerCollection"
        '400':
          "$ref": "#/responses/BadRequest"
      tags:
      - Worker
    post:
      summary: Stores one or more workers
      security:
        - OAuth2Implicit: [worker:write]
        - OAuth2AccessCode: [worker:write]
        - OAuth2Password: [worker:write]
      parameters:
      - in: body
        name: Worker
        required: true
        schema:
          "$ref": "#/definitions/Worker"
      responses:
        '201':
          "$ref": "#/responses/Created"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      tags:
      - Worker
  "/workers/{workerId}":
    get:
      summary: Retrieves a Worker document
      security:
        - OAuth2Implicit: [worker:read]
        - OAuth2AccessCode: [worker:read]
        - OAuth2Password: [worker:read]
      responses:
        '200':
          description: Worker document fetched successfully
          schema:
            "$ref": "#/definitions/Worker"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/Worker__id"
      - "$ref": "#/parameters/embedded"
      tags:
      - Worker
    put:
      summary: Replaces a Worker document
      security:
        - OAuth2Implicit: [worker:write]
        - OAuth2AccessCode: [worker:write]
        - OAuth2Password: [worker:write]
      responses:
        '200':
          "$ref": "#/responses/Updated"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Worker__id"
      - in: body
        name: Worker
        required: true
        schema:
          "$ref": "#/definitions/Worker"
      tags:
      - Worker
    delete:
      summary: Deletes a Worker document
      security:
        - OAuth2Implicit: [worker:write]
        - OAuth2AccessCode: [worker:write]
        - OAuth2Password: [worker:write]
      responses:
        '204':
          description: Worker document deleted successfully
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Worker__id"
      tags:
      - Worker
  "/taskfiles":
    get:
      summary: Retrieves one or more taskfiles
      security:
        - OAuth2Implicit: [taskfile:read]
        - OAuth2AccessCode: [taskfile:read]
        - OAuth2Password: [taskfile:read]
      parameters:
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of taskfiles
          schema:
            "$ref": "#/definitions/TaskFilesCollection"
        '400':
          "$ref": "#/responses/BadRequest"
      tags:
      - TaskFile
    post:
      summary: Uploads script and auxiliar files, creating an TaskFile register
      security:
        - OAuth2Implicit: [taskfile:write]
        - OAuth2AccessCode: [taskfile:write]
        - OAuth2Password: [taskfile:write]
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: data
        required: true
        type: file
        description: File
      responses:
        '201':
          "$ref": "#/responses/Created"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      tags:
      - TaskFile
  "/taskfiles/{taskfileId}":
    get:
      summary: Retrieves a TaskFile document
      security:
        - OAuth2Implicit: [taskfile:read]
        - OAuth2AccessCode: [taskfile:read]
        - OAuth2Password: [taskfile:read]
      responses:
        '200':
          description: TaskFile document fetched successfully
          schema:
            "$ref": "#/definitions/TaskFile"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/TaskFile__id"
      - "$ref": "#/parameters/embedded"
      tags:
      - TaskFile
    delete:
      summary: Deletes a TaskFile document
      security:
        - OAuth2Implicit: [taskfile:write]
        - OAuth2AccessCode: [taskfile:write]
        - OAuth2Password: [taskfile:write]
      responses:
        '204':
          description: TaskFile document deleted successfully
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/TaskFile__id"
      tags:
      - TaskFile
  "/tasks":
    get:
      summary: Retrieves one or more tasks
      security:
        - OAuth2Implicit: [task:read]
        - OAuth2AccessCode: [task:read]
        - OAuth2Password: [task:read]
      parameters:
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of tasks
          schema:
            "$ref": "#/definitions/TaskCollection"
        '400':
          "$ref": "#/responses/BadRequest"
      tags:
      - Task
    post:
      summary: Stores one or more tasks
      security:
        - OAuth2Implicit: [task:write]
        - OAuth2AccessCode: [task:write]
        - OAuth2Password: [task:write]
      parameters:
      - in: body
        name: Task
        required: true
        schema:
          "$ref": "#/definitions/Task"
      responses:
        '201':
          "$ref": "#/responses/Created"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      tags:
      - Task
  "/tasks/{taskId}":
    get:
      summary: Retrieves a Task document
      security:
        - OAuth2Implicit: [task:read]
        - OAuth2AccessCode: [task:read]
        - OAuth2Password: [task:read]
      responses:
        '200':
          description: Task document fetched successfully
          schema:
            "$ref": "#/definitions/Task"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/Task__id"
      - "$ref": "#/parameters/embedded"
      - in: query
        name: version
        type: string
        description: "Desired version of the document. Defaults to the latest version. It's also possible to ask for all versions with version=all and for the diffs with version=diffs. See http://python-eve.org/features.html#document-versioning for more information."
      tags:
      - Task
    put:
      summary: Replaces a Task document
      security:
        - OAuth2Implicit: [task:write]
        - OAuth2AccessCode: [task:write]
        - OAuth2Password: [task:write]
      responses:
        '200':
          "$ref": "#/responses/Updated"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Task__id"
      - in: body
        name: Task
        required: true
        schema:
          "$ref": "#/definitions/Task"
      tags:
      - Task
    delete:
      summary: Deletes a Task document
      security:
        - OAuth2Implicit: [task:write]
        - OAuth2AccessCode: [task:write]
        - OAuth2Password: [task:write]
      responses:
        '204':
          description: Task document deleted successfully
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Task__id"
      tags:
      - Task
  /taskfiles/{taskfileId}/tasks:
    get:
      summary: Retrieves one or more tasks
      security:
        - OAuth2Implicit: [task:read]
        - OAuth2AccessCode: [task:read]
        - OAuth2Password: [task:read]
      parameters:
      - "$ref": "#/parameters/TaskFile__id"
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of tasks
          schema:
            "$ref": "#/definitions/TaskCollection"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      tags:
      - Task
  "/experiments":
    get:
      summary: Retrieves one or more experiments
      security:
        - OAuth2Implicit: [experiment:read]
        - OAuth2AccessCode: [experiment:read]
        - OAuth2Password: [experiment:read]
      parameters:
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of experiments
          schema:
            "$ref": "#/definitions/ExperimentCollection"
        '400':
          "$ref": "#/responses/BadRequest"
      tags:
      - Experiment
    post:
      summary: Stores one or more experiments
      security:
        - OAuth2Implicit: [experiment:write]
        - OAuth2AccessCode: [experiment:write]
        - OAuth2Password: [experiment:write]
      parameters:
      - in: body
        name: Experiment
        required: true
        schema:
          "$ref": "#/definitions/Experiment"
      responses:
        '201':
          "$ref": "#/responses/Created"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
        '422':
          "$ref": "#/responses/ValidationError"
      tags:
      - Experiment
  "/experiments/{experimentId}":
    get:
      summary: Retrieves a Experiment document
      security:
        - OAuth2Implicit: [experiment:read]
        - OAuth2AccessCode: [experiment:read]
        - OAuth2Password: [experiment:read]
      responses:
        '200':
          description: Experiment document fetched successfully
          schema:
            "$ref": "#/definitions/Experiment"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/Experiment__id"
      - "$ref": "#/parameters/embedded"
      tags:
      - Experiment
    delete:
      summary: Deletes a Experiment document
      security:
        - OAuth2Implicit: [experiment:write]
        - OAuth2AccessCode: [experiment:write]
        - OAuth2Password: [experiment:write]
      responses:
        '204':
          description: Experiment document deleted successfully
        '404':
          "$ref": "#/responses/NotFound"
      parameters:
      - "$ref": "#/parameters/if_match"
      - "$ref": "#/parameters/Experiment__id"
      tags:
      - Experiment
  /tasks/{taskId}/experiments:
    get:
      summary: Retrieves one or more experiments from the given task
      security:
        - OAuth2Implicit: [experiment:write]
        - OAuth2AccessCode: [experiment:write]
        - OAuth2Password: [experiment:write]
      parameters:
      - "$ref": "#/parameters/Task__id"
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of experiments
          schema:
            "$ref": "#/definitions/ExperimentCollection"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      tags:
      - Experiment
  /queues/{queueId}/experiments:
    get:
      summary: Retrieves one or more experiments from the given queue
      security:
        - OAuth2Implicit: [experiment:read]
        - OAuth2AccessCode: [experiment:read]
        - OAuth2Password: [experiment:read]
      parameters:
      - "$ref": "#/parameters/Queue__id"
      - "$ref": "#/parameters/page"
      - "$ref": "#/parameters/max_results"
      - "$ref": "#/parameters/embedded"
      - "$ref": "#/parameters/sort"
      - "$ref": "#/parameters/where"
      - "$ref": "#/parameters/projection"
      responses:
        '200':
          description: An array of experiments
          schema:
            "$ref": "#/definitions/ExperimentCollection"
        '400':
          "$ref": "#/responses/BadRequest"
        '404':
          "$ref": "#/responses/NotFound"
      tags:
      - Experiment
responses:
  Created:
    description: The resource has been created successfully
    schema:
      "$ref": "#/definitions/ApiResponse"
  Updated:
    description: The resource has been updated successfully
    schema:
      "$ref": "#/definitions/ApiResponse"
  ValidationError:
    description: There are validation errors in the submitted resource
    schema:
      "$ref": "#/definitions/ApiResponse"
  NotFound:
    description: The specified resource was not found
    schema:
      "$ref": "#/definitions/ApiResponse"
  BadRequest:
    description: Bad request
    schema:
      "$ref": "#/definitions/ApiResponse"
definitions:
  Role:
    type: object
    properties:
      _id:
        type: string
        format: objectid
        readOnly: true
      name:
        maxLength: 80
        type: string
      description:
        maxLength: 255
        type: string
      allowed_scopes:
        type: array
        items:
          enum:
          - user:write
          - user:read
          - queue:write
          - queue:read
          - worker:write
          - worker:read
          - taskfile:write
          - taskfile:read
          - task:write
          - task:read
          - experiment:write
          - experiment:read
          type: string
  User:
    type: object
    properties:
      _id:
        type: string
        format: objectid
        readOnly: true
      name:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        type: string
      active:
        type: boolean
      confirmed_at:
        readOnly: true
        type: string
        format: date-time
      roles:
        type: array
        items:
          type: string
          format: objectid
    required:
    - email
    - password
  Queue:
    type: object
    properties:
      name:
        type: string
      _id:
        type: string
        format: objectid
        readOnly: true
      _updated:
        readOnly: true
        type: string
        format: date-time
      _created:
        readOnly: true
        type: string
        format: date-time
      _etag:
        readOnly: true
        type: string
    required:
    - name
  Worker:
    type: object
    properties:
      name:
        type: string
      queues:
        type: array
        items:
          type: string
          format: objectid
      num_processes:
        minimum: 1
        type: integer
      _id:
        type: string
        format: objectid
        readOnly: true
      _updated:
        readOnly: true
        type: string
        format: date-time
      _created:
        readOnly: true
        type: string
        format: date-time
      _etag:
        readOnly: true
        type: string
    required:
    - name
  TaskFile:
    type: object
    properties:
      data:
        "$ref": "#/definitions/FileSource"
      _id:
        type: string
        format: objectid
        readOnly: true
      _updated:
        readOnly: true
        type: string
        format: date-time
      _created:
        readOnly: true
        type: string
        format: date-time
      _etag:
        readOnly: true
        type: string
  Task:
    type: object
    properties:
      name:
        type: string
      script_file:
        "$ref": "#/definitions/TaskFile__id"
      auxiliar_files:
        type: array
        items:
          "$ref": "#/definitions/TaskFile__id"
      param_definitions:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            type:
              enum:
              - text
              - number
              - date
              - boolean
              type: string
          required:
          - name
          - type
      _id:
        type: string
        format: objectid
        readOnly: true
      _updated:
        readOnly: true
        type: string
        format: date-time
      _created:
        readOnly: true
        type: string
        format: date-time
      _etag:
        readOnly: true
        type: string
      _version:
        readOnly: true
        type: integer
        description: Document's version
      _latest_version:
        readOnly: true
        type: integer
        description: Document's latest version
    required:
    - name
  Experiment:
    type: object
    properties:
      task:
        "$ref": "#/definitions/Task__ref"
      params:
        type: object
      queue:
        "$ref": "#/definitions/Queue__id"
      status:
        readOnly: true
        type: string
      result:
        readOnly: true
        type: object
      result_files:
        readOnly: true
        type: array
        items:
          "$ref": "#/definitions/FileSource"
      retry_count:
        readOnly: true
        type: integer
      date_received:
        readOnly: true
        type: string
        format: date-time
      date_started:
        readOnly: true
        type: string
        format: date-time
      date_last_update:
        readOnly: true
        type: string
        format: date-time
      date_done:
        readOnly: true
        type: string
        format: date-time
      traceback:
        readOnly: true
        type: string
      children:
        readOnly: true
        type: object
      progress:
        minimum: 0
        maximum: 1
        readOnly: true
        type: number
        format: float
      _id:
        type: string
        format: objectid
        readOnly: true
      _updated:
        readOnly: true
        type: string
        format: date-time
      _created:
        readOnly: true
        type: string
        format: date-time
      _etag:
        readOnly: true
        type: string
    required:
    - task
    - queue
  FileSource:
    type: object
    properties:
      file:
        type: string
        description: "File's URL"
      filename:
        type: string
      original_filename:
        type: string
      content_type:
        type: string
      length:
        type: integer
        description: Length in bytes
      md5:
        type: string
      upload_date:
        type: string
        format: date-time
  TaskFile__id:
    type: string
    format: objectid
  Task__id:
    type: string
    format: objectid
  Task__ref:
    type: object
    properties:
      _id:
        "$ref": "#/definitions/Task__id"
      _version:
        type: integer
  Queue__id:
    type: string
    format: objectid
  RoleCollection:
    type: object
    properties:
      _items:
        type: array
        items:
          "$ref": "#/definitions/Role"
      _meta:
        type: object
        properties:
          page:
            type: integer
          max_results:
            type: integer
          total:
            type: integer
  UserCollection:
    type: object
    properties:
      _items:
        type: array
        items:
          "$ref": "#/definitions/User"
      _meta:
        type: object
        properties:
          page:
            type: integer
          max_results:
            type: integer
          total:
            type: integer
  QueueCollection:
    type: object
    properties:
      _items:
        type: array
        items:
          "$ref": "#/definitions/Queue"
      _meta:
        type: object
        properties:
          page:
            type: integer
          max_results:
            type: integer
          total:
            type: integer
  WorkerCollection:
    type: object
    properties:
      _items:
        type: array
        items:
          "$ref": "#/definitions/Worker"
      _meta:
        type: object
        properties:
          page:
            type: integer
          max_results:
            type: integer
          total:
            type: integer
  TaskFilesCollection:
    type: object
    properties:
      _items:
        type: array
        items:
          "$ref": "#/definitions/TaskFile"
      _meta:
        type: object
        properties:
          page:
            type: integer
          max_results:
            type: integer
          total:
            type: integer
  TaskCollection:
    type: object
    properties:
      _items:
        type: array
        items:
          "$ref": "#/definitions/Task"
      _meta:
        type: object
        properties:
          page:
            type: integer
          max_results:
            type: integer
          total:
            type: integer
  ExperimentCollection:
    type: object
    properties:
      _items:
        type: array
        items:
          "$ref": "#/definitions/Experiment"
      _meta:
        type: object
        properties:
          page:
            type: integer
          max_results:
            type: integer
          total:
            type: integer
  Issues:
    type: object
    additionalProperties:
      type: string
      description: Pair of field name and error message.
  Status:
    type: string
    enum:
      - OK
      - ERR
  ApiResponse:
    type: object
    properties:
      _status:
        "$ref": "#/definitions/Status"
      _issues:
        "$ref": "#/definitions/Issues"
      _error:
        type: object
        properties:
          code:
            type: integer
          message:
            type: string
      _created:
        type: string
        format: date-time
        description: Time when the resource was created. Only present in POST operations.
      _updated:
        type: string
        format: date-time
        description: Time when the resource was updated. Only present in PUT, PATCH and DELETE operations.
      _id:
        type: string
        format: objectid
        description: Only present if a resource has been created or updated.
      _etag:
        type: string
        description: Only present if a resource has been created or updated.
      _version:
        type: integer
        description: Only present if a resource has been created or updated.
      _items:
        type: object
        properties:
          _status:
            "$ref": "#/definitions/Status"
          _issues:
            "$ref": "#/definitions/Issues"
        description: Responses for each resource included in the BULK INSERT.

parameters:
  Role__id:
    in: path
    name: roleId
    required: true
    description: ''
    type: string
    format: objectid
  User__id:
    in: path
    name: userId
    required: true
    description: ''
    type: string
    format: objectid
  Queue__id:
    in: path
    name: queueId
    required: true
    description: ''
    type: string
    format: objectid
  Worker__id:
    in: path
    name: workerId
    required: true
    description: ''
    type: string
    format: objectid
  TaskFile__id:
    in: path
    name: taskfileId
    required: true
    description: ''
    type: string
    format: objectid
  Task__id:
    in: path
    name: taskId
    required: true
    description: ''
    type: string
    format: objectid
  Experiment__id:
    in: path
    name: experimentId
    required: true
    description: ''
    type: string
    format: objectid
  page:
    in: query
    name: page
    type: integer
    description: The page number
  max_results:
    in: query
    name: max_results
    type: integer
    description: The max number of results
  embedded:
    in: query
    name: embedded
    type: string
    description: 'Which fields with related resources should be embedded in the response. Must be provided in the form of {"field1": 1, "field2": 0}. See http://python-eve.org/features.html#embedded-resource-serialization for more information.'
  sort:
    in: query
    name: sort
    type: string
    description: 'Which fields should be use for sorting. The default order is ascending and the minus sign means descending. For example: sort=city,-lastname would sort by city (ascending) and lastname (descending). See http://python-eve.org/features.html#sorting for more information.'
  where:
    in: query
    name: where
    type: string
    description: 'Filters the registers by any given criteria. See http://python-eve.org/features.html#filters for more information.'
  projection:
    in: query
    name: projection
    type: string
    description: 'Decided which fields should be included or excluded from the response. Must be provided in the form of {"field1": 1, "field2": 1}. See http://python-eve.org/features.html#projections for more information.'
  if_match:
    in: header
    name: 'If-Match'
    type: string
    description: Current value of the _etag field
tags:
- name: Role
- name: User
- name: Queue
- name: Worker
- name: TaskFile
- name: Task
- name: Experiment
